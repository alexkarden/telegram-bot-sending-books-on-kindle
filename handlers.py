import logging
import os
from pathlib import Path
from uuid import uuid4

from aiogram import F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from dotenv import load_dotenv

from database import add_user_db, add_user_email, get_user_email_from_db
from emailscript import send_document_via_gmail
from keyboards import main_keyboard
from script import delete_file, is_email_simple, sanitize_filename


load_dotenv()
router = Router()

DOWNLOAD_DIR = Path("downloads")
DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)
MAX_FILE_SIZE = (25 * 1024 * 1024) - 1  # 25 MB


@router.message(CommandStart())
async def cmd_start(message: Message):
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "üìö –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–Ω–∏–≥–∏ –≤ –±–æ—Ç, "
        "–∏ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–Ω–∏–≥—É –Ω–∞ –≤–∞—à <b>Kindle</b>.\n\n"
        "üìß –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à E‚Äëmail, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/myemail</code> "
        "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äî <b>–ú–æ—è –ø–æ—á—Ç–∞ Kindle</b>.\n\n"
        "‚úèÔ∏è –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å E‚Äëmail, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –±–æ—Ç—É "
        "(–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞ –≤ –¥–æ–º–µ–Ω–µ kindle.com)."
    )

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    await add_user_db(
        message.from_user.id,
        message.from_user.first_name,
        message.from_user.last_name,
        message.from_user.username,
    )
    await message.answer(
        welcome_text, reply_markup=main_keyboard, parse_mode=ParseMode.HTML
    )
    emailbool = await get_user_email_from_db(message.from_user.id)
    if emailbool:
        await message.answer(
            f"{emailbool} - –í–∞—à–∞ –ø–æ—á—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–Ω–∏–≥–∏",
            reply_markup=main_keyboard,
            parse_mode=ParseMode.HTML,
        )
    else:
        await message.answer(
            "–í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±–æ—Ç—É –í–∞—à E-mail Kindle - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–∏–≥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞",
            reply_markup=main_keyboard,
            parse_mode=ParseMode.HTML,
        )


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã/—Ñ–æ—Ç–æ)
@router.message(F.content_type == types.ContentType.TEXT)
async def all_message(message: Message):
    text = str(message.text)
    if text == "–ú–æ—è –ø–æ—á—Ç–∞ Kindle" or text == "/myemail":
        emailbool = await get_user_email_from_db(message.from_user.id)
        if emailbool:
            await message.answer(
                f"{emailbool} - –í–∞—à–∞ –ø–æ—á—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–Ω–∏–≥–∏",
                reply_markup=main_keyboard,
                parse_mode=ParseMode.HTML,
            )
        else:
            await message.answer(
                "–í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±–æ—Ç—É –í–∞—à E-mail Kindle - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–∏–≥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞",
                reply_markup=main_keyboard,
                parse_mode=ParseMode.HTML,
            )

    else:
        if is_email_simple(text):
            await add_user_email(message.from_user.id, text)
            await message.answer(
                f"–ü–æ—á—Ç–∞ {text} –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                reply_markup=main_keyboard,
                parse_mode=ParseMode.HTML,
            )
        else:
            await message.answer(
                "–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∏ –∞–¥—Ä–µ—Å–∞ E-mail –≤ –¥–æ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ kindle.com",
                reply_markup=main_keyboard,
                parse_mode=ParseMode.HTML,
            )


@router.message(F.content_type == types.ContentType.DOCUMENT)
async def handle_document(message: Message):
    doc = message.document
    if doc is None:
        return

    if doc.file_size is not None and doc.file_size > MAX_FILE_SIZE:
        await message.reply("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –õ–∏–º–∏—Ç 25 MB.")
        logging.warning(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç: %s bytes",
            message.from_user.id,
            doc.file_size,
        )
        return

    orig_name = doc.file_name or f"{doc.file_unique_id}.bin"
    safe_name = sanitize_filename(orig_name)
    dest_name = f"{uuid4().hex}_{safe_name}"
    dest_path = DOWNLOAD_DIR / dest_name
    try:
        file = await message.bot.get_file(doc.file_id)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç types.File
        await message.bot.download_file(file.file_path, destination=dest_path)
        logging.info(
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s -> %s",
            message.from_user.id,
            orig_name,
            dest_path,
        )
        emailbool = await get_user_email_from_db(message.from_user.id)
        if emailbool:
            sender_email = os.getenv("SENDER_EMAIL")
            app_password = os.getenv("APP_PASSWORD")
            to_email = emailbool
            subject = os.getenv("SUBJECT")
            body = os.getenv("BODY")
            attachment_path = dest_path

            send_document_via_gmail(
                sender_email, app_password, to_email, subject, body, attachment_path
            )
            delete_file(dest_path)
            await message.answer(
                "–ö–Ω–∏–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –í–∞—à Kindle",
                reply_markup=main_keyboard,
                parse_mode=ParseMode.HTML,
            )
        else:
            await message.answer(
                "–í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±–æ—Ç—É –í–∞—à E-mail Kindle - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–∏–≥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞",
                reply_markup=main_keyboard,
                parse_mode=ParseMode.HTML,
            )

    except Exception as e:
        logging.exception(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç %s: %s", message.from_user.id, e
        )
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
